from flask import Flask, request, json, jsonify

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import SimpleRNN, Dense
import tensorflow as tf


def create_rnn_dataset(data, window_size=1):
    data_x, data_y = [], []
    for i in range(len(data) - window_size - 1):
        a = data[i:(i + window_size), 0]
        data_x.append(a)
        data_y.append(data[i + window_size, 0])
    return np.array(data_x), np.array(data_y)


# amounts = pd.DataFrame([0, 185.4, 0, 83, 0, 0, 458.69, 1459.26, 30, 9, 28, 21, 10, 79.94, 0, 246, 25.06, 7, 137.45, 92, 27, 51.89, 3.11, 27, 20, 0, 7, 0.45, 4.53, 39.02, 5.8, 0.2, 0, 15.99, 0.01, 0, 96, 4, 4.05, 14, 17, 12.1, 30, 0, 9, 0, 26, 24.29, 42, 11, 2.5, 2, 37, 10, 7, 0, 4, 5, 24, 36, 134.67, 16.29, 57, 51.3, 54.29, 35, 9.88, 153, 10, 20, 1433, 12, 7, 27, 102, 30, 24, 18, 3.5, 29.29, 0, 0, 4, 6, 1980, 0, 2, 0, 44, 0, 0, 0, 0, 651, 104.26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529.81, 42, 21, 2960.26, 43, 0, 25, 33, 5, 30, 0, 105, 0, 117, 0, 45, 10, 55.13, 70, 40, 75, 24, 18.2, 128, 23, 70, 25, 141.75, 33, 44, 22, 0, 15, 47, 42, 39, 0, 4, 0, 25, 24, 0, 15, 8, 35.0, 34, 0, 0, 17, 4, 0, 41, 92.7, 7, 0, 0, 5, 30.27, 11, 6, 17.1, 1053.52, 1, 945.83, 104, 0, 33, 0, 569, 1642.59, 592, 252.15, 0, 0, 54.95, 100.16, 35, 4, 19, 19, 7, 715.19, 18, 29, 0, 1439, 16, 5910.92, 31.78, 43, 106.17, 23.05, 8, 23.5, 0, 38, 41, 826.82, 1.55, 6, 15.5, 2149.86, 46, 0, 24, 19.5, 25, 29, 9, 2, 16, 249, 0, 514, 0, 294.25, 15, 130.25, 181.7, 3.5, 6.5, 0, 52.65, 20, 10.18, 487.99, 25, 0, 0, 805.82, 110, 42, 4, 46, 42.05, 0, 16, 19, 2523.41, 26, 0, 11, 16, 66, 8, 52.62, 34, 34, 212, 1359, 72, 0, 138.25, 165.55, 9, 0, 0, 0, 80, 471.3, 92.67, 74, 7, 12, 122, 2090.25, 39, 14, 10, 34, 14, 16, 23, 112.9, 0, 1288, 0, 29, 19, 11, 33, 46, 27, 30, 4, 11, 17, 0, 11, 4, 43, 530.24, 4, 62, 1, 3, 4, 35, 0, 101, 26, 76.5, 0, 23, 0, 4, 3, 16, 503.8, 17, 47, 40, 4, 3, 38, 0, 38, 124.71, 56, 4, 162, 75, 34, 0, 5, 7, 4, 23, 6, 4, 49, 24, 30, 17, 36, 19, 62, 88, 0, 1207, 0, 0, 0, 0, 14, 613.46, 0, 0, 0, 0, 0, 0, 1656.2, 73, 7, 366.38, 155.58, 122.5])
amounts = pd.DataFrame([
        32,
        33.5,
        0,
        0,
        27.01,
        0,
        0,
        -23,
        -46,
        0,
        26,
        13.15,
        6.5,
        -50,
        0,
        25,
        11,
        34,
        4,
        0,
        12,
        24,
        30.97,
        34,
        6,
        0,
        0,
        49,
        0,
        22,
        -0.08,
        17.25,
        0,
        0,
        0,
        2055,
        0,
        15,
        0,
        0.46,
        9,
        0,
        0,
        55,
        0,
        11,
        0,
        0,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        0,
        0,
        28.99,
        0,
        0,
        73,
        -6,
        600,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        87,
        -1458.26,
        0,
        0,
        11,
        0,
        -1349,
        1370,
        0,
        60.27,
        15,
        6,
        29,
        22,
        -13.5,
        28,
        26,
        27,
        29,
        27.37,
        7.3,
        33,
        18,
        200,
        0,
        -6.34,
        61,
        12.5,
        20.02,
        31,
        20,
        34,
        7,
        32,
        -9,
        43,
        9,
        29,
        44,
        22.75,
        93,
        -20,
        4,
        36.5,
        41,
        0,
        41.52,
        37,
        0,
        46.5,
        0,
        62.67,
        53,
        2.1,
        44,
        39,
        99.9,
        21.9,
        41.7,
        4,
        44,
        -2.95,
        39,
        28,
        9.1,
        0,
        0,
        0,
        0,
        109,
        -100,
        0,
        28,
        26,
        0,
        0,
        0,
        14,
        0,
        -37,
        0,
        0,
        0,
        15,
        -30.25,
        0,
        76.39,
        -7.48,
        -7,
        88.8,
        0,
        0,
        24,
        78.6,
        25,
        0,
        -3.99,
        0,
        -1126.64,
        0.2,
        53.7,
        80,
        0,
        0,
        0,
        0,
        4,
        0,
        41,
        -31.15,
        25,
        0,
        7,
        0,
        42.8,
        4.85,
        0,
        0,
        0,
        -100,
        -24,
        65,
        -24.28,
        11,
        137,
        120.99,
        0,
        -781.44,
        49,
        0,
        -26.95,
        0,
        0,
        0,
        0,
        0,
        55,
        0,
        -100,
        0,
        75,
        24.16,
        161,
        48,
        33,
        8,
        11,
        27,
        18.8,
        46.01,
        1,
        36.8,
        13.8,
        11,
        41,
        46,
        0,
        24.29,
        93,
        62.45,
        -255,
        80,
        -1459.26,
        84.5,
        74,
        31,
        36,
        -11,
        46,
        16,
        69,
        10,
        57,
        4.5,
        30,
        0,
        66,
        0,
        4.34,
        101,
        28,
        11,
        4,
        34.75,
        75,
        114,
        2,
        13,
        239.4,
        33.1,
        10,
        11,
        -216.92,
        10,
        0,
        9,
        36,
        34,
        -60,
        0,
        123,
        40.84,
        22,
        34,
        12.8,
        2203.07,
        4.74,
        36.95,
        0,
        6,
        0,
        58.78,
        -101.73,
        -106.34,
        31.5,
        137.35,
        15.9,
        24,
        -54,
        47.36,
        9,
        -78.84,
        0,
        39,
        79,
        -142.93,
        23,
        -28.75,
        18,
        16,
        19.06,
        6,
        4.15,
        27,
        16,
        -50.85,
        17.6,
        38.15,
        22,
        24,
        11,
        -163.36,
        21,
        0,
        -37.4,
        70,
        0,
        6,
        0,
        0,
        0,
        48,
        -47.4,
        0,
        -59.2,
        -20,
        83,
        0,
        0,
        -1522.26,
        1459.26,
        30,
        9,
        28,
        21,
        10,
        10,
        0,
        46,
        -133.94,
        7,
        38.45,
        22,
        20.4,
        40.64,
        -148.55,
        15.67,
        20,
        0,
        7,
        0.45,
        4.53,
        39.02,
        -17.2,
        0.2,
        0,
        15.99,
        0.01,
        -23.25,
        -29.42,
        -29,
        4.05,
        14,
        17,
        12.1,
        30,
        0,
        -72.15,
        0,
        25,
        10.02,
        -38.5,
        11,
        2.5,
        2,
        -13,
        10,
        7,
        0,
        4,
        5,
        -11.02,
        31,
        36.17,
        16.29,
        -43,
        23,
        27.66,
        35,
        -111.57,
        2,
        -5,
        20,
        8,
        12,
        -0.43,
        27,
        0.88,
        30,
        -26,
        18,
        3.5,
        -11.2,
        0,
        -116.3,
        4,
        6,
        -10,
        0,
        0,
        2,
        0,
        -2,
        0,
        0,
        0,
        0,
        -13.35,
        104.26,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -13.41,
        -64.15,
        21,
        -33.35,
        30.25,
        0,
        25,
        33,
        5,
        30,
        0,
        -92.25,
        -62,
        0,
        40.2,
        9,
        55.13,
        70,
        40,
        -184.33,
        24,
        -2.05,
        128,
        23,
        -119.95,
        25,
        8,
        33,
        44,
        22,
        0,
        -181,
        47,
        42,
        39,
        0,
        4,
        -113,
        25,
        10.06,
        0,
        15,
        8,
        35,
        34,
        -60,
        0,
        17,
        4,
        0,
        -11.06,
        38.8,
        7,
        0,
        0,
        5,
        30.27,
        11,
        -192.07,
        17.1,
        22,
        1,
        -60,
        104,
        -69.98,
        -117,
        0,
        -526.35,
        581.08,
        23,
        56.39,
        0,
        0,
        54.95,
        34,
        10,
        4,
        19,
        -81,
        7,
        15.19,
        18,
        -771,
        0,
        730,
        16,
        47,
        -123.58,
        43,
        -53.8,
        23.05,
        8,
        23.5,
        0,
        38,
        41,
        13.25,
        -98.45,
        6,
        15.5,
        2.1,
        28.15,
        0,
        -97.75,
        9.5,
        25,
        29,
        1.1,
        2,
        16,
        -86.34,
        0,
        17,
        0,
        14.25,
        15,
        10,
        -52.3,
        3.5,
        6.5,
        0,
        52.65,
        20,
        10.18,
        -65,
        25,
        0,
        0,
        0,
        102,
        -158,
        4,
        -454,
        -1836.52,
        0,
        16,
        19,
        2310.13,
        26,
        0,
        11,
        16,
        66,
        -992,
        52.62,
        34,
        34,
        212,
        159,
        72,
        0,
        138.25,
        165.55,
        -169.86,
        0,
        0,
        -100,
        -51.64,
        240.44,
        92.67,
        -26,
        -88.73,
        12,
        -552.63,
        597.33,
        39,
        14,
        10,
        34,
        14,
        16,
        23,
        -156,
        0,
        26,
        -11.19,
        29,
        19,
        -19,
        0.54,
        46,
        27,
        -83.23,
        4,
        11,
        17,
        -11.62,
        -89,
        4,
        42.98,
        27,
        -46,
        62,
        1,
        4,
        -75,
        -5.64,
        101,
        26,
        -7.09,
        0,
        -77,
        0,
        4,
        -5,
        16,
        -23,
        17,
        -75,
        40,
        4,
        3,
        38,
        0,
        -67,
        24.03,
        56,
        4,
        12,
        75,
        -3,
        -100,
        5,
        7,
        4,
        3,
        6,
        4,
        49,
        -98,
        30,
        17,
        36,
        17.85,
        -124.38,
        85.75,
        0,
        7,
        0,
        0,
        0,
        0,
        14,
        -109,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -147.58,
        147.58,
        122.5,
        29,
        -10,
        0,
        10.5,
        0,
        -153,
        14,
        51,
        -61,
        1,
        23,
        34,
        7,
        6,
        0,
        -71,
        28,
        -30,
        0,
        21,
        0,
        74,
        -105.24,
        0,
        13,
        0,
        -348,
        388,
        0,
        -266.32,
        181.32,
        76.5,
        0,
        53,
        27,
        -71.5,
        10,
        30,
        -41,
        0
    ])

scaler = StandardScaler()
scaled_amounts = amounts.values  # ?
scaled_amounts = scaler.fit_transform(amounts.values)

window_size = 30

train_x, train_y = create_rnn_dataset(scaled_amounts, window_size)

price_model = Sequential()
price_model.add(SimpleRNN(32, input_shape=(1, window_size)))
price_model.add(Dense(1))
price_model.compile(loss="mean_squared_error", optimizer="adam", metrics=["mse"])
price_model.summary()

train_x = np.reshape(train_x, (train_x.shape[0], 1, train_x.    shape[1]))
price_model.fit(train_x, train_y, epochs=30, batch_size=1, verbose=1)

app = Flask(__name__)


@app.route("/api/predict", methods=["POST"])
def predict():
    predictions = []
    previous_thirty_days = np.array(json.loads(
        json.loads(request.data)["previous_thirty_days"]))
    forecast_amount = json.loads(request.data)["forecast_amount"]
    for _ in range(forecast_amount):
        scaled_previous_thirty_days = scaler.transform(
            previous_thirty_days.reshape(-1, 1))
        model_input = np.reshape(scaled_previous_thirty_days, (
            scaled_previous_thirty_days.shape[1], 1, scaled_previous_thirty_days.shape[0]))
        pred = scaler.inverse_transform(price_model.predict(model_input))
        predictions.append(f"{pred[0][0]}")
        previous_thirty_days = np.append(previous_thirty_days, pred)
        previous_thirty_days = previous_thirty_days[1:]
    return jsonify(predictions)
